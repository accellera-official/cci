Notes
-----
The following definitions are in line with the requirements doc
but making the words more concrete:

Parameter Handle (PH): Parameter access object allowing typeless
(JSON) string access. This is the cci_base_param.

Parameter Object (PO): Parameter access object being typed. This
is derived from the PH, thus it is the same object.

Name-Value-Pair (NVP): Conceptional pair of the unique 
hierarchical parameter name and the (JSON) string value. It is
up to the implementation where this is stored (e.g. in a database
or in PHs). The value is consistent with the PH/PO's one at any
time.

----------------------------------------------------------------

CALLBACKS

Callback registration methods return shared pointers 
to callback adapters. Advantage: the callback will automatically 
destroyed when no smart pointer to the callback adapter exists 
any longer. The only rule is: 
Rule: Store the returned shared pointer and keep it until you want
      the callback to be deleted.

BTW: The shared pointer handling does not cause any memory leak.

* Why not using SCV callback mechanism of scv_smart_ptr? *

The scv_extension_if provides in the form of 
scv_extension_callbacks_if a similar callback mechanism we have 
in mind. The biggest problem is the lack of callback types 
pre/post-read and pre-write, only post-write (value change) is 
provided. 
Unfortunately extending the SCV mechanism is not possible because 
there is the method get_instance() which returns a non-constant 
pointer to the underlying object, which then can be changed and 
the trigger_value_change_cb() function needs to be called 
manually (SCV Spec. v.1.0e, p.22). When introducing further 
callback types to SCV we would need to change the SCV standard 
according the user rules to this get_instance() call, which is 
no option.
Another disadvantage is that callback method parameter needs to 
be an object of type scv_extensions_if - which would require a 
big amount of methods to be implemented by the parameters.

Therefore I suggest we adopt the proposed approach which is aligned 
to the SCV approach: We use register/remove method calls which look 
similar but take a different function pointer which gets a 
cci_base_param object and a callback_type. It will therefore look 
and feel similar, but will have the added benefits we need in CCI 
(more callback types and different objects given to the called 
functions).
I prefer the shared_ptr approach (the register/add method 
returns such a pointer instead of an SCV-like callback ID) to 
reduce the danger of memory leaks which may occur when just 
newing callback objects.

----------------------------------------------------------------

PORTABILITY

One aspect ensuring portability is the used data type sc_dt::uint64. 
Since this standard is a SystemC standard, this should be the data 
type used. 
"int64 is a native C++ integer type having a word length of exactly 
64 bits.", "uint64 is a native C++ unsigned integer type having a 
word length of exactly 64 bits." 
(IEEE Standard SystemC Language Reference Manual, March 2006).

----------------------------------------------------------------

THROWING ERRORS

The proposal uses sc_report to report errors/warnings/infos like 
bad values, bad types etc. The used message type prefix is 
"/OSCI/CCI/". These sc_reports can be handled by the application
very elegant and SystemC-like, and can be switched off or even 
caught locally.
Using sc_report for throwing exceptions is advisable because 
catching other exceptions being thrown in e.g. sc_threads is
hard to do for the user.

----------------------------------------------------------------

PRIVATE BROKERS

If a module or subsystem shall contain private (hidden) parameters,
the user needs to create a private broker outside the module and
provide it through a constructor parameter of type 
cci_broker_manager to the module. Parameters that shall be public 
can be specified while constructing the private broker.
The cci_broker_manager will be created only as temporary object 
during construction of that module or subsystem and manages the 
broker stack (push and pop).

The automatically provided broker is only valid/appropriate only 
during construction. It is recommended for ALL modules (even those 
who intentionally do not make use of private brokers) that the user 
stores the responsible broker during construction for later use 
(call function cci_broker_manager::get_current_broker).

If cci config accesses or parameter creation takes place outside the 
construction (e.g. within sc_threads/_methods) the previously stored 
broker shall be used or given to the parameter constructor!

Background Notes:
Internal broker stack:
An internal broker stack is maintained by the broker manager.
During construction private brokers are pushed to top and later
popped. During construction of the user module the top broker is
the one being responsible for the module. 
There is the option to get the second most top one (TODO: maybe 
not needed, this WAS for a new priv. broker to get its hierarchical 
upwards broker - but this can just be the top one since new
brokers are not yet pushed to top when they are created).

Legacy notice: The user shall NOT derive from 
cci_broker_manager_module any more!

----------------------------------------------------------------

INIT VALUE PRECEDENCE (TIME ORDERED / HIERARCHICAL)

The proposal default is time ordered precedence for initial values. This means the latest call to set_init_value on the broker for a specific parameter is the one that actually get applied when the parameter comes to existence.
To emulate a hierarchical precedence (like e.g. the OVM mechanism uses), the following can be done with the proposed standard (also see file discussions.txt):
- before creating the subsystem which creates the parameter,
- Set the initial value using broker->set_init_value()
- lock the initial value  using broker->lock_init_value()
- instantiate the subsystem
Effect: When any module in the subsystem tries to set the initial value again, this is locked, thus the second setting being ignored. Hence the hierarchically highest module has the control over the initial value. (Remark this has no influence on writes to the parameter object.)

----------------------------------------------------------------

EMULATING HIERARCHICAL PRECEDENCE (e.g. OVM)

Guidelines how to emulate a hierarchical setting mechanism with
the parameter object proposal (e.g. for OVM).
(Decision on 6/2)

This approach needs the subsystem to be created after the initial 
value being set and locked before the param construction within 
the child module.

For Parameters being used during construction:
   Coding:
    - Set initial value
    - lock the initial value
    - instantiate the child module
   Summary:
    The broker has an additional API function allowing to lock an 
    initial value.

For Parameters being used later than construction:
  Coding rule:
    - Just set the parameter value after the construction call.
    - The hierarchically most top level will overwrite all previous
      settings/values.

----------------------------------------------------------
CLASS NAMES

The cci prefix is doubled: in the namespace and often in 
the class names. E.g.: cci::cci_base_param.
We discussed and this is OSCI practice thus ok this way.

----------------------------------------------------------
NO POST_READ CALLBACKS

We currently do NOT provide post_read callbacks since they are very
hard (impossible in C++?) to define and implement.

----------------------------------------------------------

christian.schroeder@greensocs.com
