
Warning: ConfigDatabase: setInitValue: Parameter already exists as implicit parameter. Do not set the initial value twice!
In file: /Users/schroede/mydev/cci_git/cci/greencontrol_cci_branch/greencontrol/gcnf/plugin/configdatabase.h:232
Owner.int_param exists (implicit or explicit)
@0 s /0 (Manipulator): Write originator for IMPLICIT param Owner.int_param (from broker): Manipulator

Warning: deserialize: Conversion error: 'This is a param with top-level-name'
In file: /Users/schroede/mydev/cci_git/cci/greencontrol_cci_branch/greencontrol/gcnf/apis/gs_param/gs_param_native.hpp:123

Warning: deserialize: Conversion error: 'This is a param with top-level-name'
In file: /Users/schroede/mydev/cci_git/cci/greencontrol_cci_branch/greencontrol/gcnf/apis/gs_param/gs_param_native.hpp:123

------ sc_start() ----------------

----------------------------
@0 s /0 (Observer): Write originator for EXPLICIT param Owner.int_param (from broker): Manipulator
@0 s /0 (Observer): register for new parameter callbacks
@0 s /0 (Observer): register pre write callback for int_param to check value settings and reject them
int_param has value = 11
int_param set value = 99 (shall fail)
@0 s /0 (Observer): Callback method called (which rejects changes):
  Parameter 'Owner.int_param' type 1, originator: Observer
  REJECT VALUE CHANGE!!


Observer: Caught Error: /ASI/CCI/SET_PARAM_FAILED: Value rejected by callback.
In file: /Users/schroede/mydev/cci_git/cci/api/cnf/cci_report_handler.h:33
In process: Observer.main_action @ 0 s
int_param has value = 11
param list:
MutabilityOwner.elab_time_int_param MutabilityOwner.immutable_int_param MutabilityOwner.mutable_int_param Owner.bool_param Owner.int_param Owner.str_param Owner.uint_param Owner.uint_param2 param2 top.arbitrary.param top.arbitrary.param3 top.param1 

----------------------------
Owner: uint_param get_default_value()=12000
Owner: uint_param=12000
Owner: uint_param is_default_value()=1
@0 s /0 (Observer): Callback for parameter 'Owner.uint_param' will change value, originator: owning_param
@0 s /0 (Observer): Callback for parameter 'Owner.uint_param' changed to value '12000', originator: owning_param
Owner: set uint_param=12000
Owner: uint_param is_default_value()=0
@0 s /0 (Observer): Callback for parameter 'Owner.uint_param' will change value, originator: owning_param
@0 s /0 (Observer): Callback for parameter 'Owner.uint_param' changed to value '10', originator: owning_param
Owner: set uint_param=10
Owner: uint_param is_default_value()=0

Owner: uint_param get_default_value()=12000
Owner: bool_param get_default_value()=
Owner: Caught Error: /ASI/CCI/GET_PARAM_FAILED: Param has no default value.
In file: /Users/schroede/mydev/cci_git/cci/api/cnf/cci_report_handler.h:37
In process: Owner.main_action @ 0 s
Owner: bool_param is_invalid_value()=1
Owner: bool_param is_invalid_value()=0
Owner: bool_param is_invalid_value()=1

----------------------------
MutabilityOwner: demonstrate mutable parameter being made temporarily immutable
MutabilityOwner:  mutable_int_param=50
MutabilityOwner:  set mutable_int_param to 150
MutabilityOwner:  mutable_int_param=150
MutabilityOwner:  lock mutable_int_param
MutabilityOwner:    set mutable_int_param should fail

MutabilityOwner: Caught Error: /ASI/CCI/SET_PARAM_FAILED: Parameter locked.
In file: /Users/schroede/mydev/cci_git/cci/api/cnf/cci_report_handler.h:33
In process: MutabilityOwner.main_action @ 0 s
MutabilityOwner:  mutable_int_param=150
MutabilityOwner:    set mutable_int_param with wrong key

MutabilityOwner: Caught Error: /ASI/CCI/SET_PARAM_FAILED: Wrong key.
In file: /Users/schroede/mydev/cci_git/cci/api/cnf/cci_report_handler.h:33
In process: MutabilityOwner.main_action @ 0 s

MutabilityOwner: Caught Error: /ASI/CCI/SET_PARAM_FAILED: Wrong key.
In file: /Users/schroede/mydev/cci_git/cci/api/cnf/cci_report_handler.h:33
In process: MutabilityOwner.main_action @ 0 s
MutabilityOwner:    set mutable_int_param with key - should succeed
MutabilityOwner:  mutable_int_param=4444
MutabilityOwner:  unlock mutable_int_param
MutabilityOwner:    set mutable_int_param should succeed
----------------------------
Owner: Owner.int_param.json_serialize() = 11
@1 ns /1 (Observer): Callback for parameter 'Owner.int_param' will change value, originator: owning_param
@1 ns /1 (Observer): Callback for parameter 'Owner.int_param' changed to value '555000', originator: owning_param
Owner: Owner.int_param.json_deserialize(555000) results in 555000
Owner: set int_param = 100
@1 ns /1 (Observer): Callback for parameter 'Owner.int_param' will change value, originator: owning_param
@1 ns /1 (Observer): Callback for parameter 'Owner.int_param' changed to value '100', originator: owning_param
Owner: set int_param.set(200)
@1 ns /1 (Observer): Callback for parameter 'Owner.int_param' will change value, originator: owning_param
@1 ns /1 (Observer): Callback for parameter 'Owner.int_param' changed to value '200', originator: owning_param
Owner: create parameter 
@1 ns /1 (Observer): New parameter callback 'Owner.uchar_param', value '0', originator: owning_param
  created Owner.uchar_param
Owner: Set the new parameter uchar_param

Owner: copy @1 ns /1 (Observer): Callback for parameter 'Owner.uint_param' will change value, originator: owning_param
@1 ns /1 (Observer): Callback for parameter 'Owner.uint_param' changed to value '12', originator: owning_param
----------------------------
@10 ns /2 (Manipulator): Set parameter Owner.int_param to value=5000
@10 ns /2 (Observer): Callback for parameter 'Owner.int_param' will change value, originator: Manipulator
@10 ns /2 (Observer): Callback for parameter 'Owner.int_param' changed to value '5000', originator: Manipulator

@10 ns /3 (Manipulator): Set parameter Owner.int_param to value=5001
@10 ns /3 (Observer): Callback for parameter 'Owner.int_param' will change value, originator: Manipulator
@10 ns /3 (Observer): Callback for parameter 'Owner.int_param' changed to value '5001', originator: Manipulator

@10 ns /4 (Manipulator): Set parameter Owner.int_param to value=5002
@10 ns /4 (Observer): Callback for parameter 'Owner.int_param' will change value, originator: Manipulator
@10 ns /4 (Observer): Callback for parameter 'Owner.int_param' changed to value '5002', originator: Manipulator

@10 ns /5 (Manipulator): Set parameter Owner.uint_param to value=9000
@10 ns /5 (Observer): Callback for parameter 'Owner.uint_param' will change value, originator: Manipulator
@10 ns /5 (Observer): Callback for parameter 'Owner.uint_param' changed to value '9000', originator: Manipulator

@11 ns /7 (Observer): latest write originator of parameter 'Owner.int_param': Manipulator
@11 ns /7 (Observer): Callback for parameter 'Owner.int_param' will change value, originator: Observer
@11 ns /7 (Observer): Callback for parameter 'Owner.int_param' changed to value '666666', originator: Observer
@11 ns /7 (Observer): latest write originator of parameter 'Owner.int_param': Observer
@11 ns /7 (Observer): Write originator for EXPLICIT param Owner.int_param (from broker): Observer

----------------------------
@20 ns /8 (ValueMod): Set parameter Owner.uint_param to value=555 using cci_value
@20 ns /8 (Observer): Callback for parameter 'Owner.uint_param' will change value, originator: ValueMod
@20 ns /8 (Observer): Callback for parameter 'Owner.uint_param' changed to value '555', originator: ValueMod
uint_param has value = 555

str_param has value = This is a test string.
@20 ns /8 (ValueMod): Set parameter Owner.str_param to value="test cci value string" using cci_value
str_param has value = test cci value string

----------------------------

**** Parameter list: 
   MutabilityOwner.elab_time_int_param, MutabilityOwner.immutable_int_param, MutabilityOwner.mutable_int_param, Owner.bool_param, Owner.int_param, Owner.str_param, Owner.uchar_param, Owner.uint_param, Owner.uint_param2, param2, top.arbitrary.param, top.arbitrary.param3, top.param1


------ sc_start() returned -------

